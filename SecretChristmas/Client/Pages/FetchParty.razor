@page "/partylist"
@inject HttpClient Http
@inject NavigationManager UriHelper

<PageTitle>Party</PageTitle>

<h1>Party List</h1>

<p>List of all of our current scheduled parties.</p>
<button @onclick=NewParty>Add Party</button>

@if (parties == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th>Party ID</th>
                <th>Party Name</th>
                <th>Host First Name</th>
                <th>Host Last Name</th>
                <th>Party Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Party party in parties)
            {
                <tr>
                    <td><button @onclick="() => Edit(party.PartyID)">Edit</button></td>
                    <td><button @onclick="(() => Delete(party.PartyID))">Delete</button></td>
                    <td>@party.PartyID</td>
                    <td>@party.PartyName</td>
                    <td>@party.PartyHost.FirstName</td>
                    <td>@party.PartyHost.LastName</td>
                    <td>@party.PartyDate.ToShortDateString()</td>
                    
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Party[]? parties;
    public event Action OnChange;

    protected override async Task OnInitializedAsync()
    {
        parties = await Http.GetFromJsonAsync<Party[]>("Party");
        OnChange += StateHasChanged;
    }

    public void NewParty()
    {
        UriHelper.NavigateTo($"newparty");
    }

    public void Edit(int id)
    {
        UriHelper.NavigateTo($"editparty/{id}");
    }

    public async void Delete(int id)
    {
        await Http.DeleteAsync($"Party/{id}");
        parties = await Http.GetFromJsonAsync<Party[]>("Party");
        OnChange.Invoke();
    }

    public void Dispose()
    {
        OnChange -= StateHasChanged;
    }

}
